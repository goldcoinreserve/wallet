import { Observable } from 'rxjs';
import { MosaicInfoDTO } from 'symbol-openapi-typescript-fetch-client';
import { MerkleStateInfo } from '../model/blockchain';
import { MosaicId } from '../model/mosaic/MosaicId';
import { MosaicInfo } from '../model/mosaic/MosaicInfo';
import { NetworkType } from '../model/network/NetworkType';
import { Http } from './Http';
import { MosaicRepository } from './MosaicRepository';
import { Page } from './Page';
import { MosaicPaginationStreamer } from './paginationStreamer';
import { MosaicSearchCriteria } from './searchCriteria/MosaicSearchCriteria';
/**
 * Mosaic http repository.
 *
 * @since 1.0
 */
export declare class MosaicHttp extends Http implements MosaicRepository {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param networkType the network type.
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url: string, networkType?: NetworkType | Observable<NetworkType>, fetchApi?: any);
    /**
     * Gets the MosaicInfo for a given mosaicId
     * @param mosaicId - Mosaic id
     * @returns Observable<MosaicInfo>
     */
    getMosaic(mosaicId: MosaicId): Observable<MosaicInfo>;
    /**
     * Gets MosaicInfo for different mosaicIds.
     * @param mosaicIds - Array of mosaic ids
     * @returns Observable<MosaicInfo[]>
     */
    getMosaics(mosaicIds: MosaicId[]): Observable<MosaicInfo[]>;
    /**
     * Gets a MosaicInfo merkle for a given mosaicId
     * @param mosaicId - Mosaic id
     * @returns Observable<MerkleStateInfo>
     */
    getMosaicMerkle(mosaicId: MosaicId): Observable<MerkleStateInfo>;
    /**
     * Gets an array of mosaics.
     * @summary Get mosaics created for given address
     * @param criteria Mosaic search criteria
     * @returns {Page<MosaicInfo>}
     */
    search(criteria: MosaicSearchCriteria): Observable<Page<MosaicInfo>>;
    streamer(): MosaicPaginationStreamer;
    /**
     * Maps MosaicInfoDTO to MosaicInfo
     *
     * @param mosaicInfo the dto object.
     * @returns the model object
     */
    static toMosaicInfo(mosaicInfo: MosaicInfoDTO): MosaicInfo;
}
