import { Observable } from 'rxjs';
import { MerkleStateInfo } from '../model';
import { MosaicRestriction } from '../model/restriction/MosaicRestriction';
import { Http } from './Http';
import { Page } from './Page';
import { RestrictionMosaicPaginationStreamer } from './paginationStreamer';
import { RestrictionMosaicRepository } from './RestrictionMosaicRepository';
import { RestrictionMosaicSearchCriteria } from './searchCriteria';
/**
 * RestrictionMosaic http repository.
 *
 * @since 1.0
 */
export declare class RestrictionMosaicHttp extends Http implements RestrictionMosaicRepository {
    /**
     * Constructor
     * @param url Base catapult-rest url
     * @param fetchApi fetch function to be used when performing rest requests.
     */
    constructor(url: string, fetchApi?: any);
    /**
     * Returns a mosaic restrictions page based on the criteria.
     *
     * @param criteria the criteria
     * @return a page of {@link MosaicRestriction}
     */
    search(criteria: RestrictionMosaicSearchCriteria): Observable<Page<MosaicRestriction>>;
    streamer(): RestrictionMosaicPaginationStreamer;
    private static toMosaicGlobalRestrictionItem;
    private static toMosaicAddressRestrictionItem;
    getMosaicRestrictions(compositeHash: string): Observable<MosaicRestriction>;
    getMosaicRestrictionsMerkle(compositeHash: string): Observable<MerkleStateInfo>;
}
