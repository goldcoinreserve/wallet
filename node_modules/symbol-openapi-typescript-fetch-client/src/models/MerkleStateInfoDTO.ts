/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MerkleTreeBranchDTO,
    MerkleTreeBranchDTOFromJSON,
    MerkleTreeBranchDTOFromJSONTyped,
    MerkleTreeBranchDTOToJSON,
    MerkleTreeLeafDTO,
    MerkleTreeLeafDTOFromJSON,
    MerkleTreeLeafDTOFromJSONTyped,
    MerkleTreeLeafDTOToJSON,
} from './';

/**
 * The merkle path information clients can use to proof the state of the given entity.
 * @export
 * @interface MerkleStateInfoDTO
 */
export interface MerkleStateInfoDTO {
    /**
     * The hex information of the complete merkle tree as returned by server api.
     * More information can be found in chapter 4.3 of the catapult whitepaper.
     * @type {string}
     * @memberof MerkleStateInfoDTO
     */
    raw: string;
    /**
     * Merkle tree parsed from merkle tree raw.
     * @type {Array<MerkleTreeBranchDTO | MerkleTreeLeafDTO>}
     * @memberof MerkleStateInfoDTO
     */
    tree: Array<MerkleTreeBranchDTO | MerkleTreeLeafDTO>;
}

export function MerkleStateInfoDTOFromJSON(json: any): MerkleStateInfoDTO {
    return MerkleStateInfoDTOFromJSONTyped(json, false);
}

export function MerkleStateInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerkleStateInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'raw': json['raw'],
        'tree': ((json['tree'] as Array<any>)),
    };
}

export function MerkleStateInfoDTOToJSON(value?: MerkleStateInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'raw': value.raw,
        'tree': ((value.tree as Array<any>)),
    };
}


