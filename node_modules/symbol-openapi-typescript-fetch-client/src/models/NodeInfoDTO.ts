/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NodeInfoDTO
 */
export interface NodeInfoDTO {
    /**
     * Version of the application.
     * @type {number}
     * @memberof NodeInfoDTO
     */
    version: number;
    /**
     * Public key.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    publicKey: string;
    /**
     * 
     * @type {string}
     * @memberof NodeInfoDTO
     */
    networkGenerationHashSeed: string;
    /**
     * A number that defines the different roles the node provides. Possible roles are:
     * * 1 - Peer node.
     * * 2 - Api node.
     * * 4 - Voting node.
     * * 64 - IPv4 compatible node
     * * 128 - IPv6 compatible node.
     * 
     * The values are bitwise added together, Examples:
     * 1 = Just Peer.
     * 2 = Just Api.
     * 3 = Peer and Api node.
     * 7 = Peer, Api and Voting node.
     * 65 = IPv4 and Peer node.
     * @type {number}
     * @memberof NodeInfoDTO
     */
    roles: number;
    /**
     * Port used for the communication.
     * @type {number}
     * @memberof NodeInfoDTO
     */
    port: number;
    /**
     * 
     * @type {number}
     * @memberof NodeInfoDTO
     */
    networkIdentifier: number;
    /**
     * Node friendly name.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    friendlyName: string;
    /**
     * Node IP address.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    host: string;
    /**
     * Public key.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    nodePublicKey?: string;
}

export function NodeInfoDTOFromJSON(json: any): NodeInfoDTO {
    return NodeInfoDTOFromJSONTyped(json, false);
}

export function NodeInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'publicKey': json['publicKey'],
        'networkGenerationHashSeed': json['networkGenerationHashSeed'],
        'roles': json['roles'],
        'port': json['port'],
        'networkIdentifier': json['networkIdentifier'],
        'friendlyName': json['friendlyName'],
        'host': json['host'],
        'nodePublicKey': !exists(json, 'nodePublicKey') ? undefined : json['nodePublicKey'],
    };
}

export function NodeInfoDTOToJSON(value?: NodeInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'publicKey': value.publicKey,
        'networkGenerationHashSeed': value.networkGenerationHashSeed,
        'roles': value.roles,
        'port': value.port,
        'networkIdentifier': value.networkIdentifier,
        'friendlyName': value.friendlyName,
        'host': value.host,
        'nodePublicKey': value.nodePublicKey,
    };
}


