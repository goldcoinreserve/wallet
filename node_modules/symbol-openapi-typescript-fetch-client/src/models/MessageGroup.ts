/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BmTreeSignature,
    BmTreeSignatureFromJSON,
    BmTreeSignatureFromJSONTyped,
    BmTreeSignatureToJSON,
    StageEnum,
    StageEnumFromJSON,
    StageEnumFromJSONTyped,
    StageEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface MessageGroup
 */
export interface MessageGroup {
    /**
     * 
     * @type {StageEnum}
     * @memberof MessageGroup
     */
    stage: StageEnum;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof MessageGroup
     */
    height: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageGroup
     */
    hashes: Array<string>;
    /**
     * 
     * @type {Array<BmTreeSignature>}
     * @memberof MessageGroup
     */
    signatures: Array<BmTreeSignature>;
}

export function MessageGroupFromJSON(json: any): MessageGroup {
    return MessageGroupFromJSONTyped(json, false);
}

export function MessageGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stage': json['stage'],
        'height': json['height'],
        'hashes': json['hashes'],
        'signatures': ((json['signatures'] as Array<any>)),
    };
}

export function MessageGroupToJSON(value?: MessageGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stage': value.stage,
        'height': value.height,
        'hashes': value.hashes,
        'signatures': ((value.signatures as Array<any>)),
    };
}


