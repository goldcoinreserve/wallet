/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MerkleStateInfoDTO,
    MerkleStateInfoDTOFromJSON,
    MerkleStateInfoDTOToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    SecretLockInfoDTO,
    SecretLockInfoDTOFromJSON,
    SecretLockInfoDTOToJSON,
    SecretLockPage,
    SecretLockPageFromJSON,
    SecretLockPageToJSON,
} from '../models';

export interface GetSecretLockRequest {
    compositeHash: string;
}

export interface GetSecretLockMerkleRequest {
    compositeHash: string;
}

export interface SearchSecretLockRequest {
    address?: string;
    secret?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

/**
 * 
 */
export class SecretLockRoutesApi extends runtime.BaseAPI {

    /**
     * Gets the hash lock for a given composite hash.
     * Get secret lock information
     */
    async getSecretLockRaw(requestParameters: GetSecretLockRequest): Promise<runtime.ApiResponse<SecretLockInfoDTO>> {
        if (requestParameters.compositeHash === null || requestParameters.compositeHash === undefined) {
            throw new runtime.RequiredError('compositeHash','Required parameter requestParameters.compositeHash was null or undefined when calling getSecretLock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/secret/{compositeHash}`.replace(`{${"compositeHash"}}`, encodeURIComponent(String(requestParameters.compositeHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretLockInfoDTOFromJSON(jsonValue));
    }

    /**
     * Gets the hash lock for a given composite hash.
     * Get secret lock information
     */
    async getSecretLock(compositeHash: string): Promise<SecretLockInfoDTO> {
        const response = await this.getSecretLockRaw({ compositeHash: compositeHash });
        return await response.value();
    }

    /**
     * Gets the hash lock merkle for a given composite hash.
     * Get secret lock merkle information
     */
    async getSecretLockMerkleRaw(requestParameters: GetSecretLockMerkleRequest): Promise<runtime.ApiResponse<MerkleStateInfoDTO>> {
        if (requestParameters.compositeHash === null || requestParameters.compositeHash === undefined) {
            throw new runtime.RequiredError('compositeHash','Required parameter requestParameters.compositeHash was null or undefined when calling getSecretLockMerkle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/secret/{compositeHash}/merkle`.replace(`{${"compositeHash"}}`, encodeURIComponent(String(requestParameters.compositeHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MerkleStateInfoDTOFromJSON(jsonValue));
    }

    /**
     * Gets the hash lock merkle for a given composite hash.
     * Get secret lock merkle information
     */
    async getSecretLockMerkle(compositeHash: string): Promise<MerkleStateInfoDTO> {
        const response = await this.getSecretLockMerkleRaw({ compositeHash: compositeHash });
        return await response.value();
    }

    /**
     * Returns an array of secret locks.
     * Search secret lock entries
     */
    async searchSecretLockRaw(requestParameters: SearchSecretLockRequest): Promise<runtime.ApiResponse<SecretLockPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.secret !== undefined) {
            queryParameters['secret'] = requestParameters.secret;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/secret`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SecretLockPageFromJSON(jsonValue));
    }

    /**
     * Returns an array of secret locks.
     * Search secret lock entries
     */
    async searchSecretLock(address?: string, secret?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<SecretLockPage> {
        const response = await this.searchSecretLockRaw({ address: address, secret: secret, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

}
