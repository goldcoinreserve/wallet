/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FinalizationProofDTO,
    FinalizationProofDTOFromJSON,
    FinalizationProofDTOToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models';

export interface GetFinalizationProofAtEpochRequest {
    epoch: number;
}

export interface GetFinalizationProofAtHeightRequest {
    height: string;
}

/**
 * 
 */
export class FinalizationRoutesApi extends runtime.BaseAPI {

    /**
     * Gets finalization proof for the greatest height associated with the given epoch.
     * Get finalization proof
     */
    async getFinalizationProofAtEpochRaw(requestParameters: GetFinalizationProofAtEpochRequest): Promise<runtime.ApiResponse<FinalizationProofDTO>> {
        if (requestParameters.epoch === null || requestParameters.epoch === undefined) {
            throw new runtime.RequiredError('epoch','Required parameter requestParameters.epoch was null or undefined when calling getFinalizationProofAtEpoch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finalization/proof/epoch/{epoch}`.replace(`{${"epoch"}}`, encodeURIComponent(String(requestParameters.epoch))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FinalizationProofDTOFromJSON(jsonValue));
    }

    /**
     * Gets finalization proof for the greatest height associated with the given epoch.
     * Get finalization proof
     */
    async getFinalizationProofAtEpoch(epoch: number): Promise<FinalizationProofDTO> {
        const response = await this.getFinalizationProofAtEpochRaw({ epoch: epoch });
        return await response.value();
    }

    /**
     * Gets finalization proof at the given height.
     * Get finalization proof
     */
    async getFinalizationProofAtHeightRaw(requestParameters: GetFinalizationProofAtHeightRequest): Promise<runtime.ApiResponse<FinalizationProofDTO>> {
        if (requestParameters.height === null || requestParameters.height === undefined) {
            throw new runtime.RequiredError('height','Required parameter requestParameters.height was null or undefined when calling getFinalizationProofAtHeight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finalization/proof/height/{height}`.replace(`{${"height"}}`, encodeURIComponent(String(requestParameters.height))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FinalizationProofDTOFromJSON(jsonValue));
    }

    /**
     * Gets finalization proof at the given height.
     * Get finalization proof
     */
    async getFinalizationProofAtHeight(height: string): Promise<FinalizationProofDTO> {
        const response = await this.getFinalizationProofAtHeightRaw({ height: height });
        return await response.value();
    }

}
