/* tslint:disable */
/* eslint-disable */
/*
 * Copyright 2019 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest 2.3.0
 *
 * The version of the OpenAPI document: 0.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HashLockInfoDTO,
    HashLockInfoDTOFromJSON,
    HashLockInfoDTOToJSON,
    HashLockPage,
    HashLockPageFromJSON,
    HashLockPageToJSON,
    MerkleStateInfoDTO,
    MerkleStateInfoDTOFromJSON,
    MerkleStateInfoDTOToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface GetHashLockRequest {
    hash: string;
}

export interface GetHashLockMerkleRequest {
    hash: string;
}

export interface SearchHashLockRequest {
    address?: string;
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
}

/**
 * 
 */
export class HashLockRoutesApi extends runtime.BaseAPI {

    /**
     * Gets the hash lock for a given hash.
     * Get hash lock information
     */
    async getHashLockRaw(requestParameters: GetHashLockRequest): Promise<runtime.ApiResponse<HashLockInfoDTO>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getHashLock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/hash/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HashLockInfoDTOFromJSON(jsonValue));
    }

    /**
     * Gets the hash lock for a given hash.
     * Get hash lock information
     */
    async getHashLock(hash: string): Promise<HashLockInfoDTO> {
        const response = await this.getHashLockRaw({ hash: hash });
        return await response.value();
    }

    /**
     * Gets the hash lock merkle for a given hash.
     * Get hash lock merkle information
     */
    async getHashLockMerkleRaw(requestParameters: GetHashLockMerkleRequest): Promise<runtime.ApiResponse<MerkleStateInfoDTO>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getHashLockMerkle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/hash/{hash}/merkle`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MerkleStateInfoDTOFromJSON(jsonValue));
    }

    /**
     * Gets the hash lock merkle for a given hash.
     * Get hash lock merkle information
     */
    async getHashLockMerkle(hash: string): Promise<MerkleStateInfoDTO> {
        const response = await this.getHashLockMerkleRaw({ hash: hash });
        return await response.value();
    }

    /**
     * Returns an array of hash locks.
     * Search hash lock entries
     */
    async searchHashLockRaw(requestParameters: SearchHashLockRequest): Promise<runtime.ApiResponse<HashLockPage>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/lock/hash`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HashLockPageFromJSON(jsonValue));
    }

    /**
     * Returns an array of hash locks.
     * Search hash lock entries
     */
    async searchHashLock(address?: string, pageSize?: number, pageNumber?: number, offset?: string, order?: Order): Promise<HashLockPage> {
        const response = await this.searchHashLockRaw({ address: address, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order });
        return await response.value();
    }

}
