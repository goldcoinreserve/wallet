{"remainingRequest":"/home/hero/temp/gcr-wallet/node_modules/babel-loader/lib/index.js!/home/hero/temp/gcr-wallet/node_modules/ts-loader/index.js??ref--13-2!/home/hero/temp/gcr-wallet/src/core/validation/CustomValidationRules.ts","dependencies":[{"path":"/home/hero/temp/gcr-wallet/src/core/validation/CustomValidationRules.ts","mtime":1612953106739},{"path":"/home/hero/temp/gcr-wallet/.babelrc","mtime":1612953106663},{"path":"/home/hero/temp/gcr-wallet/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hero/temp/gcr-wallet/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/hero/temp/gcr-wallet/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/hero/temp/gcr-wallet/src/core/validation/CustomValidationRules.ts"],"names":[],"mappings":"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","sourcesContent":["// external dependencies\nimport { extend } from 'vee-validate';\nimport i18n from '@/language';\nimport { Account, Address, NetworkType, Password, NamespaceId } from 'symbol-sdk';\n// internal dependencies\nimport { ProfileService } from '@/services/ProfileService';\nimport { NotificationType } from '@/core/utils/NotificationType';\nimport { AppStore } from '@/app/AppStore';\n// configuration\nimport { networkConfig } from '@/config';\nimport { appConfig } from '@/config';\nimport { AddressValidator, AliasValidator, MaxDecimalsValidator, PublicKeyValidator, UrlValidator } from './validators';\nimport { ProfileModel } from '@/core/database/entities/ProfileModel';\nimport { AccountService } from '@/services/AccountService';\nimport { NetworkConfigurationModel } from '@/core/database/entities/NetworkConfigurationModel';\nimport { Values } from 'vue-i18n';\n\n// TODO CustomValidationRules needs to be created when the network configuration is resolved, UI\n// needs to use the resolved CustomValidationRules\n// ATM rules are using the hardcoded file\nconst currentNetwork: NetworkConfigurationModel = networkConfig.networkConfigurationDefaults;\nconst { MIN_PASSWORD_LENGTH } = appConfig.constants;\n\nexport class CustomValidationRules {\n    /**\n     * Registers custom validation rules\n     * @static\n     */\n    public static register(): void {\n        extend('address', {\n            validate: (value) => {\n                return AddressValidator.validate(value);\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.ADDRESS_INVALID, values)}`,\n        });\n\n        extend('maxDecimals', {\n            validate: (value, args: any) => {\n                const { maxDecimalNumber } = args;\n                return MaxDecimalsValidator.validate(value, maxDecimalNumber);\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t('max_decimal_number_error', values)}`,\n            params: ['maxDecimalNumber'],\n        });\n\n        extend('addressOrAlias', {\n            validate: (value) => {\n                const isValidAddress = AddressValidator.validate(value);\n                const isValidAlias = AliasValidator.validate(value);\n                if (isValidAddress) {\n                    return true;\n                }\n                if (isValidAlias) {\n                    AppStore.dispatch('namespace/GET_LINKED_ADDRESS', new NamespaceId(value))\n                        .then((val) => {\n                            val ? true : false;\n                        })\n                        .catch(() => {\n                            return false;\n                        });\n                }\n                return false;\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t('error_incorrect_field', values)}`,\n        });\n\n        extend('addressOrAliasNetworkType', {\n            validate: (value, args: any) => {\n                const { networkType } = args;\n                if (!AddressValidator.validate(value)) {\n                    return true;\n                }\n                return Address.createFromRawAddress(value).networkType == networkType;\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.NETWORK_TYPE_INVALID, values)}`,\n            params: ['networkType'],\n        });\n\n        extend('url', {\n            validate: (value) => {\n                return UrlValidator.validate(value);\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t('error_incorrect_url', values)}`,\n        });\n\n        extend('confirmPassword', {\n            validate(value, args: any) {\n                const { target } = args;\n                return value === target;\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.PASSWORDS_NOT_MATCHING, values)}`,\n            params: ['target'],\n        });\n\n        extend('newAccountName', {\n            validate(value) {\n                const currentProfile = new ProfileService().getProfileByName(value);\n                return !(currentProfile && currentProfile.accounts.length > 0);\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.PROFILE_NAME_EXISTS_ERROR, values)}`,\n        });\n\n        extend('profilePassword', {\n            validate(value) {\n                if (!value || value.length < 8) {\n                    return false;\n                }\n\n                const currentProfile: ProfileModel = AppStore.getters['profile/currentProfile'];\n                const currentHash = currentProfile.password;\n                const inputHash = ProfileService.getPasswordHash(new Password(value));\n                return inputHash === currentHash;\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.WRONG_PASSWORD_ERROR, values)}`,\n        });\n\n        extend('profileAccountName', {\n            validate(value) {\n                const accountService = new AccountService();\n\n                // - fetch current profile accounts\n                const currentProfile: ProfileModel = AppStore.getters['profile/currentProfile'];\n                const knownAccounts = Object.values(accountService.getKnownAccounts(currentProfile.accounts));\n                return undefined === knownAccounts.find((w) => value === w.name);\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.ERROR_ACCOUNT_NAME_ALREADY_EXISTS, values)}`,\n        });\n\n        extend('privateKey', {\n            validate(value) {\n                try {\n                    Account.createFromPrivateKey(value, NetworkType.MIJIN_TEST);\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t(NotificationType.PROFILE_NAME_EXISTS_ERROR, values)}`,\n        });\n\n        extend('addressOrPublicKey', {\n            validate: (value) => {\n                const isValidAddress = AddressValidator.validate(value);\n                const isValidPublicKey = PublicKeyValidator.validate(value);\n                if (isValidAddress || isValidPublicKey) {\n                    return true;\n                }\n                return false;\n            },\n            message: (fieldName: string, values: Values) => `${i18n.t('error_incorrect_field', values)}`,\n        });\n\n        extend('maxNamespaceDuration', {\n            validate: (value) => {\n                return value <= currentNetwork.maxNamespaceDuration;\n            },\n            message: (fieldName: string, values: Values) => {\n                return `${i18n.t('error_incorrect_field', { ...values, maxValue: currentNetwork.maxNamespaceDuration })}`;\n            },\n        });\n\n        extend('passwordRegex', {\n            validate: (value) => {\n                return new RegExp(`(?=.*[0-9])(?=.*[a-zA-Z])(.{${MIN_PASSWORD_LENGTH},})$`).test(value);\n            },\n            message: `${i18n.t('error_new_password_format')}`,\n        }),\n            extend('in', {\n                validate: (value, array: string[]) => {\n                    if (!array) {\n                        return false;\n                    }\n                    return array.includes(value);\n                },\n                message: (fieldName: string, values: Values) => `${i18n.t('error_not_exist', values)}`,\n            });\n    }\n}\n"],"sourceRoot":""}]}